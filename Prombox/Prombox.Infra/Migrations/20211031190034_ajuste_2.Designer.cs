// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prombox.Infra.Repositories;

namespace Prombox.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211031190034_ajuste_2")]
    partial class ajuste_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Prombox.Domain.Entities.Aderente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Cnpj");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaId");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Aderentes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Campanha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativa")
                        .HasColumnType("bit")
                        .HasColumnName("Ativa");

                    b.Property<string>("Bairro")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Bairro");

                    b.Property<int?>("CampanhaLayoutId")
                        .HasColumnType("int")
                        .HasColumnName("CampanhaLayoutId");

                    b.Property<string>("CertificadoAutorizacao")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("CertificadoAutorizacao");

                    b.Property<string>("Cidade")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Cidade");

                    b.Property<string>("CpfsBloqueados")
                        .HasColumnType("TEXT")
                        .HasColumnName("CpfsBloqueados");

                    b.Property<DateTime?>("DataEnvioNF")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFinalCampanha")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataFinalCampanha");

                    b.Property<DateTime>("DataFinalPeriodoCompras")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataFinalPeriodoCompras");

                    b.Property<DateTime>("DataInicioCampanha")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataInicioCampanha");

                    b.Property<DateTime>("DataInicioPeriodoCompras")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataInicioPeriodoCompras");

                    b.Property<DateTime>("DataLimiteCadastro")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataLimiteCadastro");

                    b.Property<DateTime>("DataSorteio")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataSorteio");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailSac")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR(70)")
                        .HasColumnName("EmailSac");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaId");

                    b.Property<string>("Estado")
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("Estado");

                    b.Property<string>("GeneroSexual")
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("GeneroSexual");

                    b.Property<bool>("IsBloquearFuncionario")
                        .HasColumnType("bit")
                        .HasColumnName("IsBloquearFuncionario");

                    b.Property<bool>("IsLimiteGeneroSexual")
                        .HasColumnType("bit")
                        .HasColumnName("IsLimiteGeneroSexual");

                    b.Property<bool>("IsLimiteGeografico")
                        .HasColumnType("bit")
                        .HasColumnName("IsLimiteGeografico");

                    b.Property<bool>("IsLimiteTrocasNF")
                        .HasColumnType("bit")
                        .HasColumnName("IsLimiteTrocasNF");

                    b.Property<bool>("IsMaior18Anos")
                        .HasColumnType("bit")
                        .HasColumnName("IsMaior18Anos");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<int?>("QuantidadeLimiteNF")
                        .HasColumnType("int")
                        .HasColumnName("QuantidadeLimiteNF");

                    b.Property<int?>("RegraParticipacao")
                        .HasColumnType("int")
                        .HasColumnName("RegraParticipacao");

                    b.Property<string>("ResumoRegulamento")
                        .HasColumnType("VARCHAR")
                        .HasColumnName("ResumoRegulamento");

                    b.Property<string>("TelefoneSac")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("TelefoneSac");

                    b.Property<int>("TipoCampanha")
                        .HasColumnType("int")
                        .HasColumnName("TipoCampanha");

                    b.Property<string>("UrlGanhadores")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlGanhadores");

                    b.Property<decimal?>("ValorLimiteNF")
                        .HasColumnType("DECIMAL(18,4)")
                        .HasColumnName("ValorLimiteNF");

                    b.HasKey("Id");

                    b.HasIndex("CampanhaLayoutId")
                        .IsUnique()
                        .HasFilter("[CampanhaLayoutId] IS NOT NULL");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Campanhas");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.CampanhaAderente", b =>
                {
                    b.Property<int>("CampanhaId")
                        .HasColumnType("int")
                        .HasColumnName("CampanhaId");

                    b.Property<int>("AderenteId")
                        .HasColumnType("int")
                        .HasColumnName("AderenteId");

                    b.HasKey("CampanhaId", "AderenteId");

                    b.HasIndex("AderenteId");

                    b.ToTable("CampanhaAderentes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.CampanhaLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampanhaId")
                        .HasColumnType("int")
                        .HasColumnName("CampanhaId");

                    b.Property<string>("CorBotoes")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("CorBotoes");

                    b.Property<string>("CorCabecalhoRodape")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("CorCabecalhoRodape");

                    b.Property<string>("CorFundoSite")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("CorFundoSite");

                    b.Property<string>("UrlBanner1")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlBanner1");

                    b.Property<string>("UrlBanner2")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlBanner2");

                    b.Property<string>("UrlBanner3")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlBanner3");

                    b.Property<string>("UrlCampanha")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("UrlCampanha");

                    b.Property<string>("UrlComoParticipar")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlComoParticipar");

                    b.Property<string>("UrlFacebook")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlFacebook");

                    b.Property<string>("UrlInstagram")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlInstagram");

                    b.Property<string>("UrlLogo")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("UrlLogo");

                    b.Property<string>("UrlRegulamento")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("UrlRegulamento");

                    b.HasKey("Id");

                    b.ToTable("CampanhasLayout");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aceite")
                        .HasColumnType("bit")
                        .HasColumnName("Aceite");

                    b.Property<string>("Bairro")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Bairro");

                    b.Property<string>("Cep")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Cidade");

                    b.Property<string>("Complemento")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Complemento");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime?>("DataAceiteRegulamento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataAceiteRegulamento");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaId");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Logradouro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Numero");

                    b.Property<string>("Rg")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Rg");

                    b.Property<string>("TelPrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("TelPrincipal");

                    b.Property<string>("TelSecundario")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("TelSecundario");

                    b.Property<string>("Uf")
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("Uf");

                    b.Property<int>("UsuarioClienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioClienteId")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Contato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("Cargo")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("Cargo");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Celular");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Email");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Observacoes");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Telefone");

                    b.Property<int>("TipoContato")
                        .HasColumnType("int")
                        .HasColumnName("TipoContato");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Contatos");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.DuvidaFrequente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampanhaId")
                        .HasColumnType("int")
                        .HasColumnName("CampanhaId");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaId");

                    b.Property<int>("Ordem")
                        .HasColumnType("int")
                        .HasColumnName("Ordem");

                    b.Property<string>("Pergunta")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Pergunta");

                    b.Property<string>("Resposta")
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR(2000)")
                        .HasColumnName("Resposta");

                    b.HasKey("Id");

                    b.HasIndex("CampanhaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("DuvidasFrequentes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativa")
                        .HasColumnType("bit")
                        .HasColumnName("Ativa");

                    b.Property<string>("Bairro")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("Bairro");

                    b.Property<string>("Cep")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("Cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("Cidade");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("VARCHAR(18)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("CnpjFaturamento")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("CnpjFaturamento");

                    b.Property<string>("Complemento")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("Complemento");

                    b.Property<DateTime?>("DataEnvioNF")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataEnvioNF");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataVencimento");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("InscricaoMunicipal");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("Logradouro");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("NomeFantasia");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Numero");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Observacoes");

                    b.Property<bool?>("PrecisaOrdemCompra")
                        .HasColumnType("bit")
                        .HasColumnName("PrecisaOrdemCompra");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("RazaoSocial");

                    b.Property<string>("RazaoSocialFaturamento")
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("RazaoSocialFaturamento");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Telefone");

                    b.Property<string>("Uf")
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("Uf");

                    b.Property<string>("UrlFacebook")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("UrlFacebook");

                    b.Property<string>("UrlInstagram")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("UrlInstagram");

                    b.Property<string>("UrlLinkedin")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("UrlLinkedin");

                    b.Property<string>("UrlSite")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("UrlSite");

                    b.Property<string>("UrlTwitter")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("UrlTwitter");

                    b.Property<string>("UrlYoutube")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("UrlYoutube");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Ganhador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampanhaId")
                        .HasColumnType("int")
                        .HasColumnName("CampanhaId");

                    b.Property<int>("Colocacao")
                        .HasColumnType("int")
                        .HasColumnName("Colocacao");

                    b.Property<long>("NumeroDaSorteId")
                        .HasColumnType("bigint")
                        .HasColumnName("NumeroDaSorteId");

                    b.HasKey("Id");

                    b.HasIndex("CampanhaId");

                    b.HasIndex("NumeroDaSorteId");

                    b.ToTable("Ganhadores");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.NotaFiscal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("VARCHAR(18)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Cod")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Cod");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Data");

                    b.Property<double>("ValorTotal")
                        .HasColumnType("float")
                        .HasColumnName("ValorTotal");

                    b.HasKey("Id");

                    b.ToTable("NotasFiscais");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.NumeroDaSorte", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampanhaId")
                        .HasColumnType("int")
                        .HasColumnName("CampanhaId");

                    b.Property<long?>("ClienteId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClienteId");

                    b.Property<DateTime?>("DataHoraAssociacao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataHoraAssociacao");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint")
                        .HasColumnName("Numero");

                    b.HasKey("Id");

                    b.HasIndex("CampanhaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("NumerosDaSorte");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("AvatarUrl");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime?>("DataPrimeiroAcesso")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataPrimeiroAcesso");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("EmpresaId");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Senha")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Senha");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Telefone");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int")
                        .HasColumnName("TipoUsuario");

                    b.Property<DateTime?>("UltimaAlteracaoSenha")
                        .HasColumnType("DATETIME")
                        .HasColumnName("UltimaAlteracaoSenha");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.UsuarioCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClienteId");

                    b.Property<string>("CodigoRecuperacaoSenha")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("CodigoRecuperacaoSenha");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime?>("DataPrimeiroAcesso")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataPrimeiroAcesso");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR(70)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimaAlteracaoSenha")
                        .HasColumnType("DATETIME")
                        .HasColumnName("UltimaAlteracaoSenha");

                    b.HasKey("Id");

                    b.ToTable("UsuariosClientes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Aderente", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Aderentes")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Campanha", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.CampanhaLayout", "CampanhaLayout")
                        .WithOne("Campanha")
                        .HasForeignKey("Prombox.Domain.Entities.Campanha", "CampanhaLayoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Prombox.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampanhaLayout");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.CampanhaAderente", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Aderente", "Aderente")
                        .WithMany("CampanhaAderentes")
                        .HasForeignKey("AderenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prombox.Domain.Entities.Campanha", "Campanha")
                        .WithMany("CampanhaAderentes")
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Aderente");

                    b.Navigation("Campanha");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prombox.Domain.Entities.UsuarioCliente", "UsuarioCliente")
                        .WithOne("Cliente")
                        .HasForeignKey("Prombox.Domain.Entities.Cliente", "UsuarioClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("UsuarioCliente");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Contato", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Contatos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.DuvidaFrequente", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Campanha", "Campanha")
                        .WithMany("DuvidasFrequentes")
                        .HasForeignKey("CampanhaId");

                    b.HasOne("Prombox.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.Navigation("Campanha");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Ganhador", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Campanha", "Campanha")
                        .WithMany()
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prombox.Domain.Entities.NumeroDaSorte", "NumeroDaSorte")
                        .WithMany()
                        .HasForeignKey("NumeroDaSorteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("NumeroDaSorte");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.NumeroDaSorte", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Campanha", "Campanha")
                        .WithMany()
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prombox.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Campanha");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Prombox.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Aderente", b =>
                {
                    b.Navigation("CampanhaAderentes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Campanha", b =>
                {
                    b.Navigation("CampanhaAderentes");

                    b.Navigation("DuvidasFrequentes");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.CampanhaLayout", b =>
                {
                    b.Navigation("Campanha");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.Empresa", b =>
                {
                    b.Navigation("Aderentes");

                    b.Navigation("Contatos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Prombox.Domain.Entities.UsuarioCliente", b =>
                {
                    b.Navigation("Cliente");
                });
#pragma warning restore 612, 618
        }
    }
}
